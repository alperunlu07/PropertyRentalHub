/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Rent {
  export type PersonStruct = { name: string; addres: AddressLike };

  export type PersonStructOutput = [name: string, addres: string] & {
    name: string;
    addres: string;
  };

  export type PropertyStruct = {
    id: BigNumberish;
    owner: AddressLike;
    tenant: AddressLike;
    propertyType: BigNumberish;
    propertyAddress: string;
  };

  export type PropertyStructOutput = [
    id: bigint,
    owner: string,
    tenant: string,
    propertyType: bigint,
    propertyAddress: string
  ] & {
    id: bigint;
    owner: string;
    tenant: string;
    propertyType: bigint;
    propertyAddress: string;
  };

  export type ReportStruct = {
    id: BigNumberish;
    tenant: AddressLike;
    contractId: BigNumberish;
    propertyId: BigNumberish;
    message: string;
  };

  export type ReportStructOutput = [
    id: bigint,
    tenant: string,
    contractId: bigint,
    propertyId: bigint,
    message: string
  ] & {
    id: bigint;
    tenant: string;
    contractId: bigint;
    propertyId: bigint;
    message: string;
  };

  export type RentContractStruct = {
    id: BigNumberish;
    owner: AddressLike;
    tenant: AddressLike;
    rentStartDate: BigNumberish;
    rentEndDate: BigNumberish;
    rentAmount: BigNumberish;
    propertyId: BigNumberish;
  };

  export type RentContractStructOutput = [
    id: bigint,
    owner: string,
    tenant: string,
    rentStartDate: bigint,
    rentEndDate: bigint,
    rentAmount: bigint,
    propertyId: bigint
  ] & {
    id: bigint;
    owner: string;
    tenant: string;
    rentStartDate: bigint;
    rentEndDate: bigint;
    rentAmount: bigint;
    propertyId: bigint;
  };
}

export interface RentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addHomeOwner"
      | "addPropertyToOwner"
      | "addTenant"
      | "getAllHomeOwners"
      | "getPropertiesByOwner"
      | "getPropertyReport"
      | "getRentProperty"
      | "homeOwners"
      | "isHomeOwner"
      | "isTenants"
      | "ownerProperties"
      | "rentContracts"
      | "reports"
      | "sendPropertyReport"
      | "startRentProperty"
      | "stopRentProperty"
      | "tenants"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addHomeOwner",
    values: [Rent.PersonStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addPropertyToOwner",
    values: [Rent.PropertyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addTenant",
    values: [Rent.PersonStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllHomeOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertiesByOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRentProperty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "homeOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isHomeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTenants",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerProperties",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentContracts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPropertyReport",
    values: [Rent.ReportStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "startRentProperty",
    values: [Rent.RentContractStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stopRentProperty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tenants",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addHomeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPropertyToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTenant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllHomeOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertiesByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "homeOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isHomeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTenants", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendPropertyReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRentProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopRentProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tenants", data: BytesLike): Result;
}

export interface Rent extends BaseContract {
  connect(runner?: ContractRunner | null): Rent;
  waitForDeployment(): Promise<this>;

  interface: RentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addHomeOwner: TypedContractMethod<
    [_person: Rent.PersonStruct],
    [void],
    "nonpayable"
  >;

  addPropertyToOwner: TypedContractMethod<
    [_property: Rent.PropertyStruct],
    [void],
    "nonpayable"
  >;

  addTenant: TypedContractMethod<
    [_person: Rent.PersonStruct],
    [void],
    "nonpayable"
  >;

  getAllHomeOwners: TypedContractMethod<
    [],
    [Rent.PersonStructOutput[]],
    "view"
  >;

  getPropertiesByOwner: TypedContractMethod<
    [],
    [Rent.PropertyStructOutput[]],
    "view"
  >;

  getPropertyReport: TypedContractMethod<
    [PropertyId: BigNumberish],
    [Rent.ReportStructOutput[]],
    "view"
  >;

  getRentProperty: TypedContractMethod<
    [],
    [Rent.RentContractStructOutput[]],
    "view"
  >;

  homeOwners: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { name: string; addres: string }],
    "view"
  >;

  isHomeOwner: TypedContractMethod<[_addres: AddressLike], [boolean], "view">;

  isTenants: TypedContractMethod<[_addres: AddressLike], [boolean], "view">;

  ownerProperties: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        id: bigint;
        owner: string;
        tenant: string;
        propertyType: bigint;
        propertyAddress: string;
      }
    ],
    "view"
  >;

  rentContracts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        owner: string;
        tenant: string;
        rentStartDate: bigint;
        rentEndDate: bigint;
        rentAmount: bigint;
        propertyId: bigint;
      }
    ],
    "view"
  >;

  reports: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, string] & {
        id: bigint;
        tenant: string;
        contractId: bigint;
        propertyId: bigint;
        message: string;
      }
    ],
    "view"
  >;

  sendPropertyReport: TypedContractMethod<
    [_report: Rent.ReportStruct],
    [void],
    "nonpayable"
  >;

  startRentProperty: TypedContractMethod<
    [_rentContract: Rent.RentContractStruct],
    [void],
    "nonpayable"
  >;

  stopRentProperty: TypedContractMethod<
    [_contractId: BigNumberish],
    [void],
    "nonpayable"
  >;

  tenants: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { name: string; addres: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addHomeOwner"
  ): TypedContractMethod<[_person: Rent.PersonStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addPropertyToOwner"
  ): TypedContractMethod<
    [_property: Rent.PropertyStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTenant"
  ): TypedContractMethod<[_person: Rent.PersonStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllHomeOwners"
  ): TypedContractMethod<[], [Rent.PersonStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPropertiesByOwner"
  ): TypedContractMethod<[], [Rent.PropertyStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPropertyReport"
  ): TypedContractMethod<
    [PropertyId: BigNumberish],
    [Rent.ReportStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRentProperty"
  ): TypedContractMethod<[], [Rent.RentContractStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "homeOwners"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { name: string; addres: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isHomeOwner"
  ): TypedContractMethod<[_addres: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTenants"
  ): TypedContractMethod<[_addres: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "ownerProperties"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        id: bigint;
        owner: string;
        tenant: string;
        propertyType: bigint;
        propertyAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rentContracts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        owner: string;
        tenant: string;
        rentStartDate: bigint;
        rentEndDate: bigint;
        rentAmount: bigint;
        propertyId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reports"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint, string] & {
        id: bigint;
        tenant: string;
        contractId: bigint;
        propertyId: bigint;
        message: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sendPropertyReport"
  ): TypedContractMethod<[_report: Rent.ReportStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startRentProperty"
  ): TypedContractMethod<
    [_rentContract: Rent.RentContractStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stopRentProperty"
  ): TypedContractMethod<[_contractId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tenants"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { name: string; addres: string }],
    "view"
  >;

  filters: {};
}
